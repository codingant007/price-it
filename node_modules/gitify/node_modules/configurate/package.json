{
  "name": "configurate",
  "version": "0.1.4",
  "description": "Set up workflow to load existing or default config, allow user to edit it and then serializes it to disk.",
  "main": "index.js",
  "scripts": {
    "test-main": "tap test/*.js",
    "test-0.8": "nave use 0.8 npm run test-main",
    "test-0.10": "nave use 0.10 npm run test-main",
    "test-all": "npm run test-main && npm run test-0.8 && npm run test-0.10",
    "test": "if [ -e $TRAVIS ]; then npm run test-all; else npm run test-main; fi"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/thlorenz/configurate.git"
  },
  "homepage": "https://github.com/thlorenz/configurate",
  "dependencies": {
    "runnel": "~0.5.0",
    "mkdirp": "~0.3.5",
    "sinless": "~0.1.0"
  },
  "devDependencies": {
    "nave": "~0.4.3",
    "tap": "~0.4.3",
    "rimraf": "~2.2.0",
    "npmlog": "0.0.3",
    "promfig": "~0.1.0"
  },
  "keywords": [
    "config",
    "configure",
    "configuration",
    "load",
    "default",
    "edit",
    "deserialize",
    "serialize",
    "save",
    "custom",
    "workflow"
  ],
  "author": {
    "name": "Thorsten Lorenz",
    "email": "thlorenz@gmx.de",
    "url": "http://thlorenz.com"
  },
  "license": {
    "type": "MIT",
    "url": "https://github.com/thlorenz/configurate/blob/master/LICENSE"
  },
  "engine": {
    "node": ">=0.6"
  },
  "readme": "# configurate [![build status](https://secure.travis-ci.org/thlorenz/configurate.png)](http://travis-ci.org/thlorenz/configurate)\n\nSet up workflow to load existing or default config, allow user to edit it and then serializes it to disk.\n\n**simple.js**\n\n```js\nvar path        =  require('path')\n  , rmrf        =  require('rimraf')\n  , configurate =  require('configurate')\n  , log         =  require('npmlog')\n  , promfig     =  require('promfig')\n  ;\n\nvar properties = { \n    user      :  'Please enter your username :  '\n  , password  :  'Please enter your password :  '\n  , '@secret' :  'password'\n};\n\n// see: https://github.com/thlorenz/promfig\nvar edit = promfig.bind(null, properties);\n\nvar defaultConfig =  path.join(__dirname, 'defaults', 'cjs-partial.js')\n  , configDir     =  path.join(__dirname, 'config')\n  , configFile    =  'configurate.js'\n  ;\n\nconfigurate(\n    { configDir     :  configDir \n    , configFile    :  configFile\n    , defaultConfig :  defaultConfig\n    , edit          :  edit\n    }\n  , function (err, config, configPath) {\n      if (err) return console.error(err);\n\n      log.info('done', 'config:\\n', config);\n      log.info('done', 'stored at:', configPath);\n    }\n)\n.on('created-configdir', function (dir) { \n  log.info('configurator', 'created config dir at: ', dir); \n})\n```\n\n**default config - `cjs-partial`**:\n\n```js\nmodule.exports = {\n    default          :  true\n  , id               :  1\n  , numberOfDefaults :  2\n};\n```\n\n**output**:\n\n```\n➝  node examples/simple.js\ninfo configurator created config dir at:  /Users/thlorenz/dev/js/projects/configurate/examples/config\nPlease enter your username : thlorenz\nPlease enter your password :  ********************************************\ninfo done config:\ninfo done  { default: true,\ninfo done   id: 1,\ninfo done   numberOfDefaults: 2,\ninfo done   user: 'thlorenz',\ninfo done   password: 'superlongandsecretpasswordthatiuseeverywhere' }\ninfo done stored at: /Users/thlorenz/dev/js/projects/configurate/examples/config/configurate.js\n```\n[Many more examples](https://github.com/thlorenz/configurate/tree/master/examples)\n\n## Installation\n\n    npm install configurate\n\n## API\n\n###*function configurate (opts:Object, cb:Function) -> EventEmitter*\n\n- **opts** allows overriding invoked functions and other options\n  - **paths**\n      - `configDir {String}`       directory in which the config file resides (default `$HOME`) if it is relative, it is created relative to `$HOME`\n      - `configFile {String}`      name of the config file which is combined with the configDir to build full config file path\n      - `defaultConfig {String}`   full path to default config to load in case the config is not found at the config path\n  - **functions**\n      - each function may take a second parameter (a callback) in order to process asynchronously\n      - `load {Function}`          called with full path to config, default is `require('..')`\n      - `edit {Function}`          called with loaded config object, by default config is not edited\n      - `serialize {Function}`     called with edited config object, default creates `'module.exports = { ... }'`\n \n- **cb** function (err:Error, config:Object, configPath:String)\n  - `err`         is set if something went wrong\n  - `config`      object that was saved including all edits, etc.\n  - `configPath`  full path to file into which the config was saved\n\n- **EventEmitter** emits the following events:\n  - `created-configdir` with the path to the created dir\n  - `copied-default`    with the path to the default config that was copied and the path to which it was copied to\n  - `loaded-config`     with the loaded config\n  - `notfound-config`   with the object used to configure from scratch\n  - `edited-config`     with the edited config object\n  - `serialized-config` with the serialized config\n  - `wrote-config`      with the path that the config was written to\n\n## Possible configuration workflows\n\nWorkflows are demonstrated in the [provided examples](https://github.com/thlorenz/configurate/tree/master/examples) and\n[tests](https://github.com/thlorenz/configurate/tree/master/test).\n\n### config exists\n  - mkdir\n  - load config\n  - edit loaded config\n  - serialize edited config\n  - write config\n\n### config doesn't exist and default config is given\n  - mkdir\n  - copy default config\n  - load copied config\n  - edit loaded config\n  - serialize edited config\n  - write config\n\n### config doesn't exist and no default config is given\n  - mkdir\n  - edit config starting from scratch ( {} ) \n  - serialize edited config\n  - write config\n\n## License\n\nMIT\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/thlorenz/configurate/issues"
  },
  "_id": "configurate@0.1.4",
  "dist": {
    "shasum": "ed858b22f1250370ecee420fe56bcfcbf0141bbc",
    "tarball": "http://registry.npmjs.org/configurate/-/configurate-0.1.4.tgz"
  },
  "_from": "configurate@~0.1.1",
  "_npmVersion": "1.2.32",
  "_npmUser": {
    "name": "thlorenz",
    "email": "thlorenz@gmx.de"
  },
  "maintainers": [
    {
      "name": "thlorenz",
      "email": "thlorenz@gmx.de"
    }
  ],
  "directories": {},
  "_shasum": "ed858b22f1250370ecee420fe56bcfcbf0141bbc",
  "_resolved": "http://registry.npmjs.org/configurate/-/configurate-0.1.4.tgz"
}
